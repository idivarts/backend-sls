service: crowdy-chat-be
frameworkVersion: "3"

provider:
  name: aws
  architecture: arm64
  runtime: provided.al2
  environment:
    SEND_MESSAGE_QUEUE_ARN:
      Fn::GetAtt:
        - CCMessageQueue
        - QueueName
    OPENAI_API_KEY: sk-proj-jx7xhhAMe27SKaDGMKr8T3BlbkFJazp4XlPOqap2HHSU3ttH
    DELAY_STATE_FUNCTION:
      Fn::GetAtt:
        - CCStepFunctions
        - Arn
    # Need to figure out a way to make this dynamic
    WS_GATEWAY_ENDPOINT: https://w754u2apn0.execute-api.us-east-1.amazonaws.com/dev
    # WS_CONNECTION_TABLE: websocketTable

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "states:StartExecution"
          Resource: { "Fn::GetAtt": ["CCStepFunctions", "Arn"] }
        - Effect: "Allow"
          Action:
            - "states:StopExecution"
          Resource:
            {
              "Fn::Join":
                [
                  "",
                  [
                    "arn:aws:states:*:*:execution:",
                    { "Fn::GetAtt": ["CCStepFunctions", "Name"] },
                    ":*",
                  ],
                ],
            }
        - Effect: "Allow"
          Action:
            - "sqs:sendmessage"
          Resource: { "Fn::GetAtt": ["CCMessageQueue", "Arn"] }

plugins:
  - serverless-go-plugin
  - serverless-domain-manager
  - serverless-certificate-creator

custom:
  go:
    baseDir: . # folder where go.mod file lives, if set `handler` property should be set relatively to that folder
    binDir: .bin # target folder for binary files
    cgo: 0 # CGO_ENABLED flag
    cmd: GOARCH=arm64 GOOS=linux go build -tags lambda.norpc # compile command
    monorepo: false # if enabled, builds function every directory (useful for monorepo where go.mod is managed by each function
    supportedRuntimes: ["provided.al2"] # the plugin compiles a function only if runtime is declared here (either on function or provider level)
    buildProvidedRuntimeAsBootstrap: true # if enabled, builds and archive function with only single "bootstrap" binary (useful for runtimes like provided.al2)
  customCertificate:
    certificateName: "be.crowdy.chat"
    hostedZoneIds: Z080267715NZAAP58PC3U
    enabled: true
    rewriteRecords: false
  customDomain:
    domainName: be.crowdy.chat
    basePath: ""
    stage: dev
    certificateName: "be.crowdy.chat"
    createRoute53Record: true
    createRoute53IPv6Record: true
    endpointType: "regional"
    securityPolicy: tls_1_2

functions:
  cc_websocket:
    handler: functions/websocket/main.go
    package:
      include:
        - 'service-account.json'
    events:
      - websocket: $connect
      - websocket: $disconnect
      - websocket: $default

  cc_backend:
    handler: functions/cc_apis/main.go
    package:
      include:
        - 'service-account.json'
    events:
      - http: ANY /api/v1/{proxy+}
      
  cc_message_wh:
    handler: functions/message_webhook/main.go
    package:
      include:
        - 'service-account.json'
    events:
      - http: ANY /instagram/webhook
      - http: ANY /facebook/webhook
      - http: GET /test/sqs

  cc_message_sqs:
    handler: functions/message_sqs/main.go
    package:
      include:
        - 'service-account.json'
    timeout: 60
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CCMessageQueue
              - Arn

package:
  patterns:
    - "!./**"
  individually: true

resources:
  Resources:
    CCMessageQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: CCMessageQueue
        VisibilityTimeout: 60

    # Step Functions state machine that delays, then publishes to SNS topic.
    CCStepFunctions:
      Type: "AWS::StepFunctions::StateMachine"
      Properties:
        StateMachineName: CCDelayedSQS
        RoleArn: !GetAtt CCStepFunctionsRole.Arn
        # Replace "SecondsPath" with "TimestampPath" for scheduling
        DefinitionString: |
          {
            "StartAt": "Delay",
            "Comment": "Publish to SNS with delay",
            "States": {
              "Delay": {
                "Type": "Wait",
                "SecondsPath": "$.delay_seconds",
                "Next": "Send message to SQS"
              },
              "Send message to SQS": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage",
                "Parameters": {  
                    "QueueUrl.$": "$.topic",
                    "MessageBody.$": "$.message"
                },
                "End":true
              }
            }
          }

    # Allow Step Functions state machine to publish to SNS topic
    CCStepFunctionsRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: !Join ["", ["/", !Ref "AWS::StackName", "/"]]
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "AllowStepFunctionsServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - !Sub "states.${AWS::Region}.amazonaws.com"
        Policies:
          - PolicyName: "PublishToSNSTopic"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sqs:sendmessage"
                  Resource: "arn:aws:sqs:*"
