service: trendly-be
frameworkVersion: "3"

provider:
  name: aws
  architecture: arm64
  runtime: provided.al2
  environment:
    VIDEO_S3_BUCKET_NAME: ${self:service}-video-uploads
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "mediaconvert:CreateJob"
            - "mediaconvert:GetJob"
            - "mediaconvert:ListJobs"
            - "mediaconvert:CancelJob"
            - "mediaconvert:DescribeEndpoints"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:ListBucket"
          Resource: 
            - arn:aws:s3:::${self:service}-video-uploads
            - arn:aws:s3:::${self:service}-video-uploads/*
        - Effect: "Allow"
          Action:
            - "iam:PassRole"
          Resource: arn:aws:iam::730335628944:role/service-role/MediaConvert_Default_Role

plugins:
  - serverless-go-plugin
  - serverless-domain-manager
  - serverless-certificate-creator
  # - serverless-plugin-typescript

custom:
  go:
    baseDir: . # folder where go.mod file lives, if set `handler` property should be set relatively to that folder
    binDir: .bin # target folder for binary files
    cgo: 0 # CGO_ENABLED flag
    cmd: GOARCH=arm64 GOOS=linux go build -tags lambda.norpc # compile command
    monorepo: false # if enabled, builds function every directory (useful for monorepo where go.mod is managed by each function
    supportedRuntimes: ["provided.al2"] # the plugin compiles a function only if runtime is declared here (either on function or provider level)
    buildProvidedRuntimeAsBootstrap: true # if enabled, builds and archive function with only single "bootstrap" binary (useful for runtimes like provided.al2)
  customCertificate:
    certificateName: "be.trendly.pro"
    hostedZoneIds: Z080267715NZAAP58PC3U
    enabled: true
    rewriteRecords: false
  customDomain:
    domainName: be.trendly.pro
    basePath: ""
    stage: dev
    certificateName: "be.crowdy.chat"
    createRoute53Record: true
    createRoute53IPv6Record: true
    endpointType: "regional"
    securityPolicy: tls_1_2

functions:
  generatePreSignedUrl:
    handler: functions/s3/main.go
    events:
      - http: POST /s3-upload

  processVideoUpload:
    handler: functions/process_video/main.go
    environment:
      MEDIACONVERT_ROLE_ARN: arn:aws:iam::730335628944:role/service-role/MediaConvert_Default_Role
      MEDIACONVERT_JOBTEMPLATE_ARN: arn:aws:mediaconvert:us-east-1:730335628944:jobTemplates/System-Ott_Cmaf_Cmfc_Avc_Aac_Sdr_Cbr
      MEDIACONVERT_JOBQUEUE_ARN: arn:aws:mediaconvert:us-east-1:730335628944:queues/Default
    events:
      - s3:
          bucket: ${self:service}-video-uploads
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: "uploads/"  # Only triggers when an object is uploaded directly in the root
            - suffix: ".mp4"
            
package:
  patterns:
    - "!./**"
  individually: true

resources:
  Resources:
    VideoUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-video-uploads
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: ["GET", "PUT", "POST", "DELETE"]
              AllowedOrigins: ["*"]

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
            - DomainName: {"Fn::GetAtt": ["VideoUploadBucket", "DomainName"]}
              Id: S3Origin
              OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
              S3OriginConfig: {}
                # OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: "redirect-to-https"
            AllowedMethods: ["GET", "HEAD"]
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: "none"
            MinTTL: 0
            DefaultTTL: 86400  # 1 day
            MaxTTL: 31536000  # 1 year
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          # PriceClass: "PriceClass_100"

    # CloudFront Origin Access Control (OAC)
    CloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:        
        OriginAccessControlConfig:
          Name: "TrendlyS3OAC"
          OriginAccessControlOriginType: "s3"
          SigningBehavior: "always"
          SigningProtocol: "sigv4"

    # S3 Bucket Policy for CloudFront with OAC
    # VideoS3BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: ${self:service}-video-uploads
    #     PolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             AWS: !GetAtt CloudFrontOriginAccessControl.Id
    #             # AccessControlId
    #           Action: "s3:GetObject"
    #           Resource: "arn:aws:s3:::${self:service}-video-uploads/*"

    # # S3 Bucket Policy for CloudFront
    # TrendlyS3BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: ${self:service}-video-uploads
    #     PolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service: cloudfront.amazonaws.com
    #           Action: "s3:GetObject"
    #           Resource: arn:aws:s3:::${self:service}-video-uploads/*
    #           Condition:
    #             StringEquals:
    #               "AWS:SourceArn": arn:aws:cloudfront::730335628944:distribution/E2SI5E1LON8KJ0
    #               # {"Fn::GetAtt": ["CloudFrontDistribution", "Arn"]}

    # # CloudFront Origin Access Identity
    # CloudFrontOriginAccessIdentity:
    #   Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    #   Properties:
    #     CloudFrontOriginAccessIdentityConfig:
    #       Comment: "Access identity for CloudFront to securely fetch content from trendly-be-video-uploads S3 bucket"