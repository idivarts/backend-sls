service: trendly-be
frameworkVersion: "3"

provider:
  name: aws
  architecture: arm64
  runtime: provided.al2
  versionFunctions: true  # Enables versioning of Lambda functions
  environment:
    VIDEO_S3_BUCKET_NAME: ${self:service}-video-uploads
    IMAGE_S3_BUCKET_NAME: ${self:service}-image-uploads
    ATTACHMENT_S3_BUCKET_NAME: ${self:service}-attachment-uploads
    CLOUDFRONT_DISTRIBUTION_URL: https://d2x6j6vtsfyq7w.cloudfront.net
    IMAGE_CF_DISTRIBUTION_URL: https://d1tfun8qrz04mk.cloudfront.net
    ATTACHMENT_CF_DISTRIBUTION_URL: https://d1u20zdoqkyuuq.cloudfront.net
    WS_GATEWAY_ENDPOINT: https://cuowcrxmii.execute-api.us-east-1.amazonaws.com/dev
    FB_CLIENT_ID: 567254166026958
    FB_CLIENT_SECRET: 98f69a92bda993fb01b11f58eaceeb07
    INSTA_CLIENT_ID: 1166596944824933
    INSTA_CLIENT_SECRET: e1003872fc1e9167220ea31d65e58d97
    STREAM_CLIENT: gg9xameygwse
    STREAM_SECRET: mac9dexrdgpdf559mjgnmz4284yfaqcx5v8evmash4y9ajbqr63ye5u83u9ufajr
    # STREAM_CLIENT: xv7c4yzcux6y
    # STREAM_SECRET: x5p7xg5gerzmdj7e4uagcz4rdnm8abj7ktuj9hhtx2kqzdzmm8gr7a38xrcpywvt
    JWT_ENCODE_KEY: anbs8372gi)(034UTHIHABCdsgsdN)
    BRAND_LOGIN_URL: "https://brands.trendly.now/login"
    SELF_BASE_URL: "https://be.trendly.now"
    SENDGRID_API_KEY: U0cuUC1mbHlIbndRanlKNzRoUXRNSHpCZy43R1MwY3Y0M0gzMzc1SS1mSFBET2VGU3Z3eWFhaTVXdHhhSTF2VGVSNk5v
    SENDGRID_NAME: Trendly
    SENDGRID_EMAIL: no-reply@trendly.now
    HUBSPOT_API_KEY: cGF0LW5hMS04YmU4ZmViNi03Nzg2LTQ3NzYtYWE5MC02Y2E3ZTg0NDBiNzk=

    # All Razorpay related variables
    GROWTH_PLAN_ID: plan_QywVXV2flgIY7N
    BUSINESS_PLAN_ID: plan_QywX8bnObf3P42
    COLLAB_BOOST_AMOUNT: 799
    COLLAB_HANDLING_LINK: https://rzp.io/rzp/collaboration-handling-support
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "mediaconvert:CreateJob"
            - "mediaconvert:GetJob"
            - "mediaconvert:ListJobs"
            - "mediaconvert:CancelJob"
            - "mediaconvert:DescribeEndpoints"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:ListBucket"
          Resource: 
            - arn:aws:s3:::${self:service}-video-uploads
            - arn:aws:s3:::${self:service}-video-uploads/*
            - arn:aws:s3:::${self:service}-image-uploads
            - arn:aws:s3:::${self:service}-image-uploads/*
            - arn:aws:s3:::${self:service}-attachment-uploads
            - arn:aws:s3:::${self:service}-attachment-uploads/*
        - Effect: "Allow"
          Action:
            - "iam:PassRole"
          Resource: arn:aws:iam::730335628944:role/service-role/MediaConvert_Default_Role

plugins:
  - serverless-go-plugin
  - serverless-domain-manager
  - serverless-certificate-creator
  # - serverless-plugin-typescript

custom:
  go:
    baseDir: . # folder where go.mod file lives, if set `handler` property should be set relatively to that folder
    binDir: .bin # target folder for binary files
    cgo: 0 # CGO_ENABLED flag
    cmd: GOARCH=arm64 GOOS=linux go build -tags lambda.norpc # compile command
    monorepo: false # if enabled, builds function every directory (useful for monorepo where go.mod is managed by each function
    supportedRuntimes: ["provided.al2"] # the plugin compiles a function only if runtime is declared here (either on function or provider level)
    buildProvidedRuntimeAsBootstrap: true # if enabled, builds and archive function with only single "bootstrap" binary (useful for runtimes like provided.al2)
  customCertificate:
    certificateName: "be.trendly.now"
    hostedZoneIds: Z02250033690XMWB8LXL7
    enabled: true
    rewriteRecords: false
  customDomain:
    domainName: be.trendly.now
    basePath: ""
    stage: dev
    certificateName: "be.trendly.now"
    createRoute53Record: true
    createRoute53IPv6Record: true
    endpointType: "regional"
    securityPolicy: tls_1_2

functions:
  sendgrid_sync:
    handler: scripts/sync-sengrid/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
    timeout: 120
    events:
      - schedule:
          rate: cron(0 12 * * ? *)  # Runs every day at 12:00 PM UTC
          enabled: true
  matchmaking:
    handler: scripts/matchmaking/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
    timeout: 900
    events:
      - schedule:
          rate:
            - cron(30 2 * * ? *)   # 8:00 AM IST daily
            - cron(30 14 * * ? *)  # 8:00 PM IST daily
          enabled: true
  trendly_discovery:
    handler: functions/trendly_discovery/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    timeout: 30
    events:
      - http: ANY /discovery/{proxy+}
  trendly_apis:
    handler: functions/trendly_apis/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    timeout: 30
    events:
      - http: ANY /api/v1/{proxy+}
  trendly_v2_apis:
    handler: functions/trendly_v2/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    timeout: 30
    events:
      - http: ANY /api/v2/{proxy+}
  trendly_collabs_apis:
    handler: functions/trendly_collabs/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    timeout: 30
    events:
      - http: ANY /api/collabs/{proxy+}
  trendly_matchmaking_apis:
    handler: functions/trendly_matchmaking/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    timeout: 30
    provisionedConcurrency: 1  # Adjust this number as per traffic/load
    events:
      - http: ANY /api/matchmaking/{proxy+}
  trendly_influencers_apis:
    handler: functions/trendly_influencers/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    timeout: 30
    events:
      - http: ANY /api/influencers/{proxy+}
  trendly_razorpay_apis:
    handler: functions/razorpay/apis/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    timeout: 30
    provisionedConcurrency: 1  # Adjust this number as per traffic/load
    events:
      - http: ANY /razorpay/{proxy+}
  trendly_payment_webhooks:
    handler: functions/razorpay/webhook/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    timeout: 30
    provisionedConcurrency: 1  # Adjust this number as per traffic/load
    events:
      - http: ANY /payment_webhooks
  stream_sqs_hook:
    handler: functions/stream_sqs_hook/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - StreamMessageQueue
              - Arn
  insta_apis:
    handler: functions/unauth_apis/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    timeout: 30
    provisionedConcurrency: 1  # Adjust this number as per traffic/load
    events:
      - http: ANY /instagram
      - http: ANY /instagram/{proxy+}
      - http: ANY /firebase
      - http: ANY /firebase/{proxy+}
  t_websocket:
    handler: functions/websocket/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    events:
      - websocket: $connect
      - websocket: $disconnect
      - websocket: $default
  s3:
    handler: functions/s3/main.go
    package:
      include:
        - 'service-account.json'
        - 'key-secrets.json'
        - 'templates/*'
    events:
      - http: ANY /s3/v1/{proxy+}
  # processVideoUpload:
  #   handler: functions/process_video/main.go
  #   environment:
  #     MEDIACONVERT_ROLE_ARN: arn:aws:iam::730335628944:role/service-role/MediaConvert_Default_Role
  #     MEDIACONVERT_JOBTEMPLATE_ARN: arn:aws:mediaconvert:us-east-1:730335628944:jobTemplates/System-Ott_Cmaf_Cmfc_Avc_Aac_Sdr_Cbr
  #     MEDIACONVERT_JOBQUEUE_ARN: arn:aws:mediaconvert:us-east-1:730335628944:queues/Default
  #   events:
  #     - s3:
  #         bucket: ${self:service}-video-uploads
  #         event: s3:ObjectCreated:*
  #         existing: true
  #         rules:
  #           - prefix: "uploads/"  # Only triggers when an object is uploaded directly in the root
            
package:
  patterns:
    - "!./**"
  individually: true

resources:
  Resources:
    StreamMessageDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: StreamMessageDLQ

    StreamMessageQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: StreamMessageQueue
        VisibilityTimeout: 60
        MaximumMessageSize: 262144  # 256 KB
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - StreamMessageDLQ
              - Arn
          maxReceiveCount: 5

    # --------------------------------------------------------------------------------------
    # ------------- S3 for Videos -----------------------------------------------------
    # --------------------------------------------------------------------------------------
    VideoUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-video-uploads
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: ["GET", "PUT", "POST", "DELETE", "HEAD"]
              AllowedOrigins: ["*"]

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
            - DomainName: {"Fn::GetAtt": ["VideoUploadBucket", "DomainName"]}
              Id: S3Origin
              OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
              S3OriginConfig: {}
                # OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: "redirect-to-https"
            AllowedMethods: ["GET", "HEAD"]
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: "none"
            MinTTL: 0
            DefaultTTL: 86400  # 1 day
            MaxTTL: 31536000  # 1 year
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          # PriceClass: "PriceClass_100"

    # CloudFront Origin Access Control (OAC)
    CloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:        
        OriginAccessControlConfig:
          Name: "TrendlyS3OAC"
          OriginAccessControlOriginType: "s3"
          SigningBehavior: "always"
          SigningProtocol: "sigv4"

    # S3 Bucket Policy for CloudFront
    VideoS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:service}-video-uploads
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: "s3:GetObject"
              Resource: arn:aws:s3:::${self:service}-video-uploads/*
              Condition:
                StringEquals:
                  "AWS:SourceArn": arn:aws:cloudfront::730335628944:distribution/E2SI5E1LON8KJ0
                  # {"Fn::GetAtt": ["CloudFrontDistribution", "Arn"]}

    # --------------------------------------------------------------------------------------
    # ------------- S3 for Images -----------------------------------------------------
    # --------------------------------------------------------------------------------------

    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-image-uploads
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: ["GET", "PUT", "POST", "DELETE", "HEAD"]
              AllowedOrigins: ["*"]

    ImageCFDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
            - DomainName: {"Fn::GetAtt": ["ImageUploadBucket", "DomainName"]}
              Id: S3ImageOrigin
              OriginAccessControlId: !GetAtt ImageCFOriginAccessControl.Id
              S3OriginConfig: {}
          DefaultCacheBehavior:
            TargetOriginId: S3ImageOrigin
            ViewerProtocolPolicy: "redirect-to-https"
            AllowedMethods: ["GET", "HEAD"]
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: "none"
            MinTTL: 0
            DefaultTTL: 86400  # 1 day
            MaxTTL: 31536000  # 1 year
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          # PriceClass: "PriceClass_100"

    # CloudFront Origin Access Control (OAC)
    ImageCFOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:        
        OriginAccessControlConfig:
          Name: "TrendlyS3ImageOAC"
          OriginAccessControlOriginType: "s3"
          SigningBehavior: "always"
          SigningProtocol: "sigv4"
    
    # S3 Bucket Policy for CloudFront
    ImageS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:service}-image-uploads
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: "s3:GetObject"
              Resource: arn:aws:s3:::${self:service}-image-uploads/*
              Condition:
                StringEquals:
                  "AWS:SourceArn": arn:aws:cloudfront::730335628944:distribution/E2IB9GHFJLTLW8
    
    # --------------------------------------------------------------------------------------
    # ------------- S3 for Attachemnts -----------------------------------------------------
    # --------------------------------------------------------------------------------------

    AttachmentUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-attachment-uploads
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: ["GET", "PUT", "POST", "DELETE"]
              AllowedOrigins: ["*"]

    AttachmentCFDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
            - DomainName: {"Fn::GetAtt": ["AttachmentUploadBucket", "DomainName"]}
              Id: S3AttachmentOrigin
              OriginAccessControlId: !GetAtt AttachmentCFOriginAccessControl.Id
              S3OriginConfig: {}
          DefaultCacheBehavior:
            TargetOriginId: S3AttachmentOrigin
            ViewerProtocolPolicy: "redirect-to-https"
            AllowedMethods: ["GET", "HEAD"]
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: "none"
            MinTTL: 0
            DefaultTTL: 86400  # 1 day
            MaxTTL: 31536000  # 1 year
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          # PriceClass: "PriceClass_100"

    # CloudFront Origin Access Control (OAC)
    AttachmentCFOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:        
        OriginAccessControlConfig:
          Name: "TrendlyS3AttachmentOAC"
          OriginAccessControlOriginType: "s3"
          SigningBehavior: "always"
          SigningProtocol: "sigv4"

    # S3 Bucket Policy for CloudFront
    AttachmentS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:service}-attachment-uploads
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: "s3:GetObject"
              Resource: arn:aws:s3:::${self:service}-attachment-uploads/*
              Condition:
                StringEquals:
                  "AWS:SourceArn": arn:aws:cloudfront::730335628944:distribution/EKFBJTEBWZH55